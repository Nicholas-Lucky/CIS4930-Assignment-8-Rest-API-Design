# Resources I used when making this yaml file:
# https://swagger.io/docs/specification/v3_0/basic-structure/
# https://learn.openapis.org/specification/paths.html
# https://learn.openapis.org/specification/http-methods.html
# https://swagger.io/docs/specification/v3_0/describing-request-body/describing-request-body/
# https://swagger.io/docs/specification/v2_0/describing-request-body/
# https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
# https://ufl.zoom.us/rec/play/wsy8lcC4JyZHaUA4V70revSr-FDgky-MAa-ztyYM6HU7cE7Fb1f43mFC_lgttzyw1BVO1tIqpYwzJNV_.OT4TWqLM_6JDEV8L?eagerLoadZvaPages=sidemenu.billing.plan_management&isReferralProgramEnabled=false&isReferralProgramAvailable=false&accessLevel=meeting&canPlayFromShare=true&from=share_recording_detail&startTime=1760562664000&componentName=rec-play&originRequestUrl=https%3A%2F%2Fufl.zoom.us%2Frec%2Fshare%2FhkiqkSIHJV4rftrbsN0KG6z_IW3AeM9ra2J2giJ2UXMM2eJDpZkltzdC0fkf1qAm.0LADJ3m2hyS4xDVr%3FstartTime%3D1760562664000

openapi: 3.0.4
info:
  title: Account Managing
  description: API to manage client and server interactions with user accounts, such as creating user accounts, logging into and verifying user accounts, and deleting user accounts.
  version: 1.0.0
  contact: {
    name: "Nicholas Lucky"
  }

servers:
  - url: http://accounts-api.server.com
    description: Main server for housing and accessing information on user accounts created through the API.
  - url: http://accounts-api.backup-server.com
    description: A copy of the main server, used as a backup server for data safety and recovery.

paths:
  /users:
    get:
      summary: Returns a list of users accounts and their credentials (username, password, email, etc.)
      description: In the case of Assignment 8 Rest API Design, this can be used when to verify a user when they are attempting to log into their account.
      responses:
        "200": # Success; a JSON array of user accounts are returned
          description: "Success: User accounts successfully found and returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "404": # Error; the user account information is not found
          description: "Error: User accounts not found"
    post:
      summary: Adds a user account with its relavant credentials into the server
      description: In the case of Assignment 8 Rest API Design, this can be used when to create a new user account when a user signs up.
      parameters:
        - name: account
          in: body
          description: The user account that is intended to be added to the server.
          schema:
            type: object
            required:
              - username
              - email
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        "201": # Success; the user account has been created
          description: "Success: User account has been created"
        "409": # Error; a user account with the same credentials (those that are considered "unique identifiers") already exists
          description: "Error: User account already exists"
    delete:
      summary: Deletes a specified user account from the server
      description: In the case of Assignment 8 Rest API Design, this can be used when a new user account decides to remove their account, or if an account needs to be terminated for any reason.
      responses:
        "200": # Success; the user account has been deleted
          description: "Success: Account successfully deleted"
        "404": # Error; the user account to be deleted is not found in the server
          description: "Error: Account not found"
        "401": # Error; an unauthorized user is attempting to delete accounts
          description: "Error: Unauthorized user"